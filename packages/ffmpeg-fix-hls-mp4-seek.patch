diff --git a/libavformat/hls.c b/libavformat/hls.c
index 8a96a37ff9..89c2557e59 100644
--- a/libavformat/hls.c
+++ b/libavformat/hls.c
@@ -2027,7 +2027,7 @@ static int hls_read_header(AVFormatContext *s)
     for (i = 0; i < c->n_playlists; i++) {
         struct playlist *pls = c->playlists[i];
         const AVInputFormat *in_fmt = NULL;
-        char *url;
+        // char *url;
         AVDictionary *options = NULL;
         struct segment *seg = NULL;
 
@@ -2108,23 +2108,28 @@ static int hls_read_header(AVFormatContext *s)
                 if (in_fmt->raw_codec_id == pls->audio_setup_info.codec_id)
                     break;
         } else {
-            pls->ctx->probesize = s->probesize > 0 ? s->probesize : 1024 * 4;
-            pls->ctx->max_analyze_duration = s->max_analyze_duration > 0 ? s->max_analyze_duration : 4 * AV_TIME_BASE;
-            pls->ctx->interrupt_callback = s->interrupt_callback;
-            url = av_strdup(pls->segments[0]->url);
-            ret = av_probe_input_buffer(&pls->pb.pub, &in_fmt, url, NULL, 0, 0);
-            if (ret < 0) {
-                /* Free the ctx - it isn't initialized properly at this point,
-                * so avformat_close_input shouldn't be called. If
-                * avformat_open_input fails below, it frees and zeros the
-                * context, so it doesn't need any special treatment like this. */
-                av_log(s, AV_LOG_ERROR, "Error when loading first segment '%s'\n", url);
-                avformat_free_context(pls->ctx);
-                pls->ctx = NULL;
-                av_free(url);
-                return ret;
-            }
-            av_free(url);
+            // pls->ctx->probesize = s->probesize > 0 ? s->probesize : 1024 * 4;
+            // pls->ctx->max_analyze_duration = s->max_analyze_duration > 0 ? s->max_analyze_duration : 4 * AV_TIME_BASE;
+            // pls->ctx->interrupt_callback = s->interrupt_callback;
+            // url = av_strdup(pls->segments[0]->url);
+            // ret = av_probe_input_buffer(&pls->pb.pub, &in_fmt, url, NULL, 0, 0);
+            // if (ret < 0) {
+            //     /* Free the ctx - it isn't initialized properly at this point,
+            //     * so avformat_close_input shouldn't be called. If
+            //     * avformat_open_input fails below, it frees and zeros the
+            //     * context, so it doesn't need any special treatment like this. */
+            //     av_log(s, AV_LOG_ERROR, "Error when loading first segment '%s'\n", url);
+            //     avformat_free_context(pls->ctx);
+            //     pls->ctx = NULL;
+            //     av_free(url);
+            //     return ret;
+            // }
+            // av_free(url);
+
+            void *iter = NULL;
+            while ((in_fmt = av_demuxer_iterate(&iter)))
+                if (strstr(in_fmt->name, "mpegts"))
+                    break;
         }
 
         if (seg && seg->key_type == KEY_SAMPLE_AES) {
@@ -2504,6 +2509,9 @@ static int hls_read_seek(AVFormatContext *s, int stream_index,
         /* Flush the packet queue of the subdemuxer. */
         ff_read_frame_flush(pls->ctx);
 
+        /* Reset the init segment so it's re-fetched and served appropiately */
+        pls->cur_init_section = NULL;
+
         pls->seek_timestamp = seek_timestamp;
         pls->seek_flags = flags;
 
